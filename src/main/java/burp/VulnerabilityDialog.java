package burp;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileFilter;
import java.awt.*;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class VulnerabilityDialog extends JDialog {
    private static final Map<String, String[]> OWASP_CATEGORIES = new HashMap<>();
    static {
        OWASP_CATEGORIES.put("A01:2021 - Broken Access Control", new String[] {
            "Violation of the Principle of Least Privilege",
            "Bypass Access Control Checks",
            "CORS Misconfiguration",
            "IDOR (Insecure Direct Object Reference)",
            "Path Traversal",
            "File Permission Misconfiguration",
            "Unauthorized API Access"
        });
        
        OWASP_CATEGORIES.put("A02:2021 - Cryptographic Failures", new String[] {
            "Weak Password Storage",
            "Weak Cryptographic Algorithm",
            "Insufficient Key Length",
            "Clear Text Data Transmission",
            "Missing Certificate Validation",
            "Use of Hardcoded Cryptographic Keys",
            "Insufficient Random Number Generation"
        });
        
        OWASP_CATEGORIES.put("A03:2021 - Injection", new String[] {
            "SQL Injection",
            "NoSQL Injection",
            "Command Injection",
            "LDAP Injection",
            "XPath Injection",
            "XML Injection",
            "Server-Side Template Injection",
            "Cross-Site Scripting (XSS)"
        });
        
        OWASP_CATEGORIES.put("A04:2021 - Insecure Design", new String[] {
            "Missing Authentication",
            "Missing Rate Limiting",
            "Insufficient Input Validation",
            "Race Condition",
            "Business Logic Flaws",
            "Insufficient Process Validation",
            "Lack of Password Recovery Controls"
        });
        
        OWASP_CATEGORIES.put("A05:2021 - Security Misconfiguration", new String[] {
            "Default Credentials",
            "Directory Listing Enabled",
            "Unnecessary Services Enabled",
            "Missing Security Headers",
            "Cross-Origin Resource Sharing Misconfiguration",
            "Error Messages with Sensitive Data",
            "SSL/TLS Misconfiguration"
        });
        
        OWASP_CATEGORIES.put("A06:2021 - Vulnerable and Outdated Components", new String[] {
            "Known Vulnerable Component",
            "End-of-Life Component",
            "Out-of-Date Component",
            "Vulnerable JavaScript Library",
            "Vulnerable Third-Party API",
            "Insecure Dependency Configuration",
            "Unmaintained Third-Party Integration"
        });
        
        OWASP_CATEGORIES.put("A07:2021 - Identification and Authentication Failures", new String[] {
            "Weak Password Requirements",
            "Weak Session Management",
            "Missing Multi-Factor Authentication",
            "Session Fixation",
            "Credential Stuffing",
            "Brute Force Attack Vulnerability",
            "Insufficient Password Recovery"
        });
        
        OWASP_CATEGORIES.put("A08:2021 - Software and Data Integrity Failures", new String[] {
            "Insecure Deserialization",
            "Unsigned Code/Updates",
            "Untrusted Data/Code from CDN",
            "Missing Integrity Checks",
            "CI/CD Pipeline Security Issues",
            "Compromised Package Dependencies",
            "Malicious Code Introduction"
        });
        
        OWASP_CATEGORIES.put("A09:2021 - Security Logging and Monitoring Failures", new String[] {
            "Missing Audit Logs",
            "Insufficient Logging",
            "Missing Alert Thresholds",
            "Improper Log Storage",
            "Logs Without Context",
            "Inadequate Monitoring",
            "Missing Critical Event Logging"
        });
        
        OWASP_CATEGORIES.put("A10:2021 - Server-Side Request Forgery (SSRF)", new String[] {
            "Basic SSRF against the Server",
            "SSRF via PDF Generators",
            "SSRF via File Upload",
            "SSRF via SVG",
            "SSRF with Cloud Service Metadata",
            "Blind SSRF Vulnerability",
            "SSRF with Local Network Access"
        });
    }

    private static final String[] RISK_LEVELS = {
        "Critical",
        "High",
        "Medium",
        "Low",
        "Informational"
    };

    private static final Map<String, String> REMEDIATION_TEMPLATES = new HashMap<>();
    static {
        REMEDIATION_TEMPLATES.put("A01:2021 - Broken Access Control",
            "1. Implement proper access control mechanisms\n" +
            "2. Use role-based access control (RBAC)\n" +
            "3. Deny by default\n" +
            "4. Implement proper session management\n" +
            "5. Regularly audit access control mechanisms");
            
        REMEDIATION_TEMPLATES.put("A03:2021 - Injection",
            "1. Use parameterized queries\n" +
            "2. Input validation and sanitization\n" +
            "3. Escape special characters\n" +
            "4. Use ORM frameworks\n" +
            "5. Implement proper error handling\n" +
            "6. Use prepared statements");
            
        // TODO: Add remediation templates for other vulnerabilities
    }

    private IBurpExtenderCallbacks callbacks;
    private IExtensionHelpers helpers;
    private IHttpRequestResponse httpMessage;
    private Map<String, String> result;
    private JComboBox<String> vulnTypeCombo;
    private JComboBox<String> vulnSubTypeCombo;
    private JComboBox<String> riskLevelCombo;
    private JTextArea descriptionArea;
    private JTextArea impactArea;
    private JTextArea requestHighlightArea;
    private JTextArea responseHighlightArea;
    private JTextArea customRemediationArea;
    private boolean isEditMode = false;
    private JButton actionButton;
    private JButton customRemediationButton;
    private boolean customRemediationAdded = false;
    private String selectedRemediationPlan = "";
    private JButton addImageButton;
    private String imagePath = null;
    private JLabel imageLabel;

    public VulnerabilityDialog(Component parent, IHttpRequestResponse message, IContextMenuInvocation invocation,
                             IBurpExtenderCallbacks callbacks, IExtensionHelpers helpers) {
        this(parent, message, invocation, callbacks, helpers, false);
    }

    public VulnerabilityDialog(Component parent, IHttpRequestResponse message, IContextMenuInvocation invocation,
                             IBurpExtenderCallbacks callbacks, IExtensionHelpers helpers, boolean isEditMode) {
        super(SwingUtilities.getWindowAncestor(parent), isEditMode ? "Edit Vulnerability" : "Add Vulnerability", 
              ModalityType.APPLICATION_MODAL);
        this.callbacks = callbacks;
        this.helpers = helpers;
        this.httpMessage = message;
        this.result = null;
        this.isEditMode = isEditMode;

        initializeUI();
        if (message != null) {
            loadMessageContent(invocation);
        }
        pack();
        setLocationRelativeTo(parent);
    }

    private void initializeUI() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(new EmptyBorder(10, 10, 10, 10));

        // Vulnerability type dropdown
        JLabel vulnLabel = new JLabel("Vulnerability Category (OWASP Top 10):");
        vulnTypeCombo = new JComboBox<>(OWASP_CATEGORIES.keySet().toArray(new String[0]));
        vulnTypeCombo.addActionListener(e -> updateSubTypeCombo());

        // Vulnerability subtype dropdown
        JLabel subTypeLabel = new JLabel("Specific Vulnerability Type:");
        vulnSubTypeCombo = new JComboBox<>();
        updateSubTypeCombo(); // İlk kategori için alt tipleri yükle

        // Risk level dropdown
        JLabel riskLabel = new JLabel("Risk Level:");
        riskLevelCombo = new JComboBox<>(RISK_LEVELS);

        // Description field
        JLabel descLabel = new JLabel("Description:");
        descriptionArea = new JTextArea(8, 60);
        descriptionArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        descriptionArea.setText(""); // Boş başlat
        JScrollPane descScroll = new JScrollPane(descriptionArea);

        // Impact field
        JLabel impactLabel = new JLabel("Impact:");
        impactArea = new JTextArea(5, 60);
        impactArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JScrollPane impactScroll = new JScrollPane(impactArea);

        // Remediation button panel
        JPanel remediationPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        customRemediationButton = new JButton("Add Custom Remediation Plan");
        customRemediationButton.addActionListener(e -> showCustomRemediationDialog());
        remediationPanel.add(customRemediationButton);

        // Custom remediation area (initially invisible)
        customRemediationArea = new JTextArea(5, 60);
        customRemediationArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JScrollPane customRemediationScroll = new JScrollPane(customRemediationArea);
        customRemediationScroll.setVisible(false);

        // Selected request/response parts
        JLabel requestLabel = new JLabel("Request Details:");
        requestHighlightArea = new JTextArea(12, 60);
        requestHighlightArea.setEditable(isEditMode);
        requestHighlightArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JScrollPane requestScroll = new JScrollPane(requestHighlightArea);

        JLabel responseLabel = new JLabel("Response Details:");
        responseHighlightArea = new JTextArea(12, 60);
        responseHighlightArea.setEditable(isEditMode);
        responseHighlightArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JScrollPane responseScroll = new JScrollPane(responseHighlightArea);

        // Image upload button and label
        JPanel imagePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        addImageButton = new JButton("Add Evidence Image");
        imageLabel = new JLabel("No image selected");
        imagePanel.add(addImageButton);
        imagePanel.add(imageLabel);
        
        addImageButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) return true;
                    String name = f.getName().toLowerCase();
                    return name.endsWith(".jpg") || name.endsWith(".jpeg") || 
                           name.endsWith(".png") || name.endsWith(".gif");
                }
                
                @Override
                public String getDescription() {
                    return "Image files (*.jpg, *.jpeg, *.png, *.gif)";
                }
            });
            
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                imagePath = fileChooser.getSelectedFile().getAbsolutePath();
                imageLabel.setText("Image selected: " + fileChooser.getSelectedFile().getName());
            }
        });
        
        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        actionButton = new JButton(isEditMode ? "Save Changes" : "Add to Report");
        JButton cancelButton = new JButton("Cancel");

        actionButton.addActionListener(e -> addToReport());
        cancelButton.addActionListener(e -> dispose());

        buttonPanel.add(actionButton);
        buttonPanel.add(cancelButton);

        // Add components to panel
        panel.add(vulnLabel);
        panel.add(vulnTypeCombo);
        panel.add(Box.createVerticalStrut(10));
        panel.add(subTypeLabel);
        panel.add(vulnSubTypeCombo);
        panel.add(Box.createVerticalStrut(10));
        panel.add(riskLabel);
        panel.add(riskLevelCombo);
        panel.add(Box.createVerticalStrut(10));
        panel.add(descLabel);
        panel.add(descScroll);
        panel.add(Box.createVerticalStrut(10));
        panel.add(impactLabel);
        panel.add(impactScroll);
        panel.add(Box.createVerticalStrut(10));
        panel.add(remediationPanel);
        panel.add(customRemediationScroll);
        panel.add(Box.createVerticalStrut(10));
        panel.add(requestLabel);
        panel.add(requestScroll);
        panel.add(Box.createVerticalStrut(10));
        panel.add(responseLabel);
        panel.add(responseScroll);
        panel.add(Box.createVerticalStrut(10));
        panel.add(imagePanel);
        panel.add(buttonPanel);

        add(panel);
        
        // Set dialog size
        setPreferredSize(new Dimension(800, 1000));
    }

    private void loadMessageContent(IContextMenuInvocation invocation) {
        // Get request and extract body
        byte[] requestBytes = httpMessage.getRequest();
        IRequestInfo requestInfo = helpers.analyzeRequest(httpMessage);
        String request = helpers.bytesToString(requestBytes);
        
        // Get response and extract body
        byte[] responseBytes = httpMessage.getResponse();
        if (responseBytes != null) {
            IResponseInfo responseInfo = helpers.analyzeResponse(responseBytes);
            String response = helpers.bytesToString(responseBytes);
            
            // Get the selection bounds if any
            int[] bounds = null;
            if (invocation != null) {
                bounds = invocation.getSelectionBounds();
            }
            
            // Show full request and response
            StringBuilder requestText = new StringBuilder();
            requestText.append("=== Full Request ===\n").append(request).append("\n\n");
            
            StringBuilder responseText = new StringBuilder();
            responseText.append("=== Full Response ===\n").append(response);
            
            // If there's a selection, add it at the top
            if (bounds != null && bounds.length == 2) {
                int start = bounds[0];
                int end = bounds[1];
                
                // Find if selection is in request or response
                if (start < request.length()) {
                    requestText.insert(0, "=== Vulnerable request ===\n" + request.substring(start, end) + "\n\n");
                } else {
                    int responseStart = start - request.length();
                    int responseEnd = end - request.length();
                    responseText.insert(0, "=== Vulnerable request ===\n" + response.substring(responseStart, responseEnd) + "\n\n");
                }
            }
            
            requestHighlightArea.setText(requestText.toString());
            responseHighlightArea.setText(responseText.toString());
            
            // Scroll to top
            requestHighlightArea.setCaretPosition(0);
            responseHighlightArea.setCaretPosition(0);
        }
    }

    private void updateSubTypeCombo() {
        String selectedCategory = (String) vulnTypeCombo.getSelectedItem();
        vulnSubTypeCombo.removeAllItems();
        if (selectedCategory != null && OWASP_CATEGORIES.containsKey(selectedCategory)) {
            for (String subType : OWASP_CATEGORIES.get(selectedCategory)) {
                vulnSubTypeCombo.addItem(subType);
            }
        }
    }

    private void showCustomRemediationDialog() {
        JDialog customDialog = new JDialog(this, "Custom Remediation Plan", true);
        customDialog.setLayout(new BorderLayout());
        
        JTextArea customPlanArea = new JTextArea(10, 50);
        customPlanArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        customPlanArea.setWrapStyleWord(true);
        customPlanArea.setLineWrap(true);
        
        JScrollPane scrollPane = new JScrollPane(customPlanArea);
        customDialog.add(scrollPane, BorderLayout.CENTER);
        
        JPanel buttonPanel = new JPanel();
        JButton saveButton = new JButton("Save");
        JButton cancelButton = new JButton("Cancel");
        
        saveButton.addActionListener(e -> {
            selectedRemediationPlan = customPlanArea.getText();
            customRemediationAdded = true;
            JOptionPane.showMessageDialog(this, "ADDED TO REPORT", "Success", JOptionPane.INFORMATION_MESSAGE);
            customDialog.dispose();
        });
        
        cancelButton.addActionListener(e -> customDialog.dispose());
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        customDialog.add(buttonPanel, BorderLayout.SOUTH);
        
        customDialog.setSize(600, 400);
        customDialog.setLocationRelativeTo(this);
        customDialog.setVisible(true);
    }

    private void addToReport() {
        result = new HashMap<>();
        String mainType = (String) vulnTypeCombo.getSelectedItem();
        String subType = (String) vulnSubTypeCombo.getSelectedItem();
        result.put("type", mainType + " - " + subType);
        result.put("risk_level", (String) riskLevelCombo.getSelectedItem());
        result.put("description", descriptionArea.getText());
        result.put("impact", impactArea.getText());
        
        if (customRemediationAdded) {
            result.put("remediation_plan", selectedRemediationPlan);
        }
        
        if (!requestHighlightArea.getText().isEmpty()) {
            result.put("request_highlight", requestHighlightArea.getText());
        }
        if (!responseHighlightArea.getText().isEmpty()) {
            result.put("response_highlight", responseHighlightArea.getText());
        }
        
        if (imagePath != null) {
            result.put("evidence_image", imagePath);
        }
        
        dispose();
    }

    public Map<String, String> getResult() {
        return result;
    }

    public void setValues(Map<String, String> vuln) {
        String fullType = vuln.get("type");
        if (fullType != null && fullType.contains(" - ")) {
            String[] parts = fullType.split(" - ", 2);
            vulnTypeCombo.setSelectedItem(parts[0]);
            updateSubTypeCombo();
            if (parts.length > 1) {
                vulnSubTypeCombo.setSelectedItem(parts[1]);
            }
        }
        
        riskLevelCombo.setSelectedItem(vuln.get("risk_level"));
        descriptionArea.setText(vuln.get("description"));
        impactArea.setText(vuln.get("impact"));
        
        if (vuln.containsKey("request_highlight")) {
            requestHighlightArea.setText(vuln.get("request_highlight"));
        }
        if (vuln.containsKey("response_highlight")) {
            responseHighlightArea.setText(vuln.get("response_highlight"));
        }

        if (vuln.containsKey("evidence_image")) {
            imagePath = vuln.get("evidence_image");
            imageLabel.setText("Image selected: " + new File(imagePath).getName());
        }

        isEditMode = true;
        actionButton.setText("Save Changes");
        setTitle("Edit Vulnerability");
    }
} 